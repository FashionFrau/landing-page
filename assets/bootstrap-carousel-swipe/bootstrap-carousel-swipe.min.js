+ function(a) {
    if (a.fn.carousel) {
        var b = function(c) { this.$element = a(c), this.carousel = this.$element.data("bs.carousel"), this.options = a.extend({}, b.DEFAULTS, this.carousel.options), this.startX = this.startY = this.startTime = this.cycling = this.$active = this.$items = this.$next = this.$prev = this.dx = null, this.$element.on("touchstart", a.proxy(this.touchstart, this)).on("touchmove", a.proxy(this.touchmove, this)).on("touchend", a.proxy(this.touchend, this)) };
        b.DEFAULTS = { swipe: 50 }, b.prototype.touchstart = function(a) {
            if (this.options.swipe) {
                var b = a.originalEvent.touches ? a.originalEvent.touches[0] : a;
                this.dx = 0, this.startX = b.pageX, this.startY = b.pageY, this.cycling = null, this.width = this.$element.width(), this.startTime = a.timeStamp } }, b.prototype.touchmove = function(a) {
            if (this.options.swipe) {
                var b = a.originalEvent.touches ? a.originalEvent.touches[0] : a,
                    c = b.pageX - this.startX,
                    b = b.pageY - this.startY;
                Math.abs(c) < Math.abs(b) || (null === this.cycling && (this.cycling = !!this.carousel.interval) && this.carousel.pause(), a.preventDefault(), this.dx = c / (this.width || 1) * 100, this.swipe(this.dx)) } }, b.prototype.touchend = function(b) {
            if (this.options.swipe && this.$active) {
                var c = a().add(this.$active).add(this.$prev).add(this.$next).carousel_transition(!0);
                b = Math.abs(this.dx / ((b.timeStamp - this.startTime) / 1e3)), 40 < this.dx || 0 < this.dx && b > this.options.swipe ? this.carousel.prev() : -40 > this.dx || 0 > this.dx && b > this.options.swipe ? this.carousel.next() : this.$active.one(a.support.transition.end, function() { c.removeClass("prev next") }).emulateTransitionEnd(1e3 * this.$active.css("transition-duration").slice(0, -1)), c.carousel_offset(!1), this.cycling && this.carousel.cycle(), this.$active = null } }, b.prototype.swipe = function(a) {
            var b = this.$active || this.getActive();
            if (0 > a) {
                if (this.$prev.carousel_offset(!1).removeClass("prev").carousel_transition(!0), !this.$next.length || this.$next.hasClass("active")) return;
                this.$next.carousel_transition(!1).addClass("next").carousel_offset(a + 100) } else {
                if (this.$next.carousel_offset(!1).removeClass("next").carousel_transition(!0), !this.$prev.length || this.$prev.hasClass("active")) return;
                this.$prev.carousel_transition(!1).addClass("prev").carousel_offset(a - 100) }
            b.carousel_transition(!1).carousel_offset(a) }, b.prototype.getActive = function() {
            return this.$active = this.$element.find(".item.active"), this.$items = this.$active.parent().children(), this.$next = this.$active.next(), !this.$next.length && this.options.wrap && (this.$next = this.$items.first()), this.$prev = this.$active.prev(), !this.$prev.length && this.options.wrap && (this.$prev = this.$items.last()), this.$active };
        var c = a.fn.carousel;
        a.fn.carousel = function() {
            return c.apply(this, arguments), this.each(function() {
                var c = a(this);
                c.data("bs.carousel.swipe") || c.data("bs.carousel.swipe", new b(this)) }) }, a.extend(a.fn.carousel, c), a.fn.carousel_transition = function(b) {
            return b = b ? "" : "none", this.each(function() { a(this).css("-webkit-transition", b).css("transition", b) }) };
        var d = function() {
            if (!window.getComputedStyle) return !1;
            var b, a = document.createElement("p"),
                c = { webkitTransform: "-webkit-transform", OTransform: "-o-transform", msTransform: "-ms-transform", MozTransform: "-moz-transform", transform: "transform" };
            document.body.insertBefore(a, null);
            for (var d in c) void 0 !== a.style[d] && (a.style[d] = "translate3d(1px,1px,1px)", b = window.getComputedStyle(a).getPropertyValue(c[d]));
            return document.body.removeChild(a), void 0 !== b && 0 < b.length && "none" !== b }();
        a.fn.carousel_offset = function(b) {
            return this.each(function() { b ? d ? a(this).css("transform", "translate3d(" + b + "%, 0, 0)") : a(this).css("left", b + "%") : a(this).css({ transform: "", left: "" }) }) }, a(".carousel").carousel() } }(jQuery);
